export default Marker;
export type ol_Map = import("ol/Map.js").default;
export type ol_coordinate_Coordinate = import("ol/coordinate.js").Coordinate;
export type ol_geom_Geometry = import("ol/geom/Geometry.js").default;
export type objectWithGeometry = import("ol/Feature.js").ObjectWithGeometry<import("ol/geom/Geometry.js").default>;
declare class Marker extends Feature<any> {
    /**
     * `import Marker from 'ol-marker-feature';`
     *
     * Extends
     *  * [ol/Feature](https://openlayers.org/en/latest/apidoc/module-ol_Feature-Feature.html)
     *
     * Fires
     *  * `click` when the marker is clicked.
     *
     * @param {ol_coordinate_Coordinate|
     *   ol_geom_Geometry|
     *   objectWithGeometry} coordOrGeomOrOptions
     * Coordinates of a point marker, a geometry, or an object with a `geometry` property. When only
     * coordinates are provided  (e.g. `new Marker([16, 48])`), a marker with the
     * [default style](#style) is created.
     */
    constructor(coordOrGeomOrOptions: import("ol/coordinate.js").Coordinate | ol_geom_Geometry | objectWithGeometry);
    /**
     * @private
     * @type {import("ol/Map.js").default|null}
     */
    private _map;
    /**
     * Get the location of the marker feature. For points, this will be the point itself.
     * For other geometry types, it will be a point on the geometry. Use this method e.g. for
     * displaying a popup at the marker feature's location.
     * @returns {ol_coordinate_Coordinate} Location of the marker in view coordinates.
     */
    getLocation(): import("ol/coordinate.js").Coordinate;
    /**
     * Adds the marker to the specified map.
     * @param {ol_Map|null} map Map to add the marker to. Call with `null` to
     * remove the marker from any map.
     */
    setMap(map: ol_Map | null): void;
}
/** @private @typedef {import("ol/Map.js").default} ol_Map */
/** @private @typedef {import("ol/coordinate.js").Coordinate} ol_coordinate_Coordinate */
/** @private @typedef {import("ol/geom/Geometry.js").default} ol_geom_Geometry */
/** @private @typedef {import("ol/Feature.js").ObjectWithGeometry<import("ol/geom/Geometry.js").default>} objectWithGeometry */
/**
 * @private
 * @type {Object<string, VectorLayer<VectorSource>>}
 */
export const _layersByMapUid: {
    [x: string]: VectorLayer<VectorSource<any>>;
};
import Feature from "ol/Feature.js";
import VectorLayer from "ol/layer/Vector.js";
import VectorSource from "ol/source/Vector.js";
//# sourceMappingURL=index.d.ts.map