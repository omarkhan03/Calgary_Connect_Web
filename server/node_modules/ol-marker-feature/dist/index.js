var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import Feature from 'ol/Feature.js';
import Point from 'ol/geom/Point.js';
import { getUid } from 'ol/util.js';
import VectorLayer from 'ol/layer/Vector.js';
import VectorSource from 'ol/source/Vector.js';
/** @private @typedef {import("ol/Map.js").default} ol_Map */
/** @private @typedef {import("ol/coordinate.js").Coordinate} ol_coordinate_Coordinate */
/** @private @typedef {import("ol/geom/Geometry.js").default} ol_geom_Geometry */
// eslint-disable-next-line max-len
/** @private @typedef {import("ol/Feature.js").ObjectWithGeometry<import("ol/geom/Geometry.js").default>} objectWithGeometry */
/**
 * @private
 * @type {Object<string, VectorLayer<VectorSource>>}
 */
var _layersByMapUid = {};
/**
 * @private
 * @param {import("ol/MapBrowserEvent.js").default} event
 */
function _hoverHandler(event) {
    var map = /** @private @type {import("ol/Map.js").default} */ (event.target);
    var cursor = map.hasFeatureAtPixel(event.pixel) ? 'pointer' : '';
    map.getViewport().style.cursor = cursor;
}
/**
 * @private
 * @param {import("ol/MapBrowserEvent.js").default} event
 */
function _clickHandler(event) {
    var map = /** @private @type {ol_Map} */ (event.target);
    var features = /** @private @type {Array<Feature>} */ (map.getFeaturesAtPixel(event.pixel));
    if (features.length) {
        var feature = features[0];
        var layer = _layersByMapUid[getUid(map)];
        if (layer.getSource().hasFeature(feature)) {
            feature.dispatchEvent('click');
        }
    }
}
var Marker = /** @class */ (function (_super) {
    __extends(Marker, _super);
    /**
     * `import Marker from 'ol-marker-feature';`
     *
     * Extends
     *  * [ol/Feature](https://openlayers.org/en/latest/apidoc/module-ol_Feature-Feature.html)
     *
     * Fires
     *  * `click` when the marker is clicked.
     *
     * @param {ol_coordinate_Coordinate|
     *   ol_geom_Geometry|
     *   objectWithGeometry} coordOrGeomOrOptions
     * Coordinates of a point marker, a geometry, or an object with a `geometry` property. When only
     * coordinates are provided  (e.g. `new Marker([16, 48])`), a marker with the
     * [default style](#style) is created.
     */
    function Marker(coordOrGeomOrOptions) {
        var _this = this;
        var useDefaultStyle = false;
        if (Array.isArray(coordOrGeomOrOptions)) {
            coordOrGeomOrOptions = new Point(coordOrGeomOrOptions);
            useDefaultStyle = true;
        }
        _this = _super.call(this, coordOrGeomOrOptions) || this;
        if (!_this.getGeometry()) {
            throw new Error('Marker must have a geometry');
        }
        if (useDefaultStyle) {
            import('./style.js').then(function (imported) {
                _this.setStyle(imported["default"]);
            });
        }
        /**
         * @private
         * @type {import("ol/Map.js").default|null}
         */
        _this._map = null;
        return _this;
    }
    /**
     * Get the location of the marker feature. For points, this will be the point itself.
     * For other geometry types, it will be a point on the geometry. Use this method e.g. for
     * displaying a popup at the marker feature's location.
     * @returns {ol_coordinate_Coordinate} Location of the marker in view coordinates.
     */
    Marker.prototype.getLocation = function () {
        /** @private @type {import("ol/geom/Geometry").default} */
        var geometry = this.getGeometry();
        switch (geometry.getType()) {
            case 'Point':
                return /** @private @type {import("ol/geom/Point.js").default} */ (geometry)
                    .getCoordinates();
            case 'Circle':
                return /** @private @type {import("ol/geom/Circle.js").default} */ (geometry)
                    .getCenter();
            case 'LineString':
                return /** @private @type {import("ol/geom/LineString.js").default} */ (geometry)
                    .getCoordinateAt(0.5);
            case 'Polygon':
                return /** @private @type {import("ol/geom/Polygon.js").default} */ (geometry)
                    .getInteriorPoint().getCoordinates().slice(0, 2);
            default:
                throw new Error('Unsupported geometry type. Expected "Point", "Circle", "LineString" or "Polygon".');
        }
    };
    /**
     * Adds the marker to the specified map.
     * @param {ol_Map|null} map Map to add the marker to. Call with `null` to
     * remove the marker from any map.
     */
    Marker.prototype.setMap = function (map) {
        if (this._map) {
            var source = _layersByMapUid[getUid(this._map)].getSource();
            source.removeFeature(this);
            if (source.isEmpty()) {
                this._map.un('pointermove', _hoverHandler);
                this._map.un('click', _clickHandler);
                delete _layersByMapUid[getUid(this._map)];
            }
        }
        if (map) {
            var layer = _layersByMapUid[getUid(map)];
            if (!layer) {
                layer = new VectorLayer({
                    source: new VectorSource(),
                    map: map
                });
                _layersByMapUid[getUid(map)] = layer;
                map.on('pointermove', _hoverHandler);
                map.on('click', _clickHandler);
            }
            layer.getSource().addFeature(this);
        }
        this._map = map;
    };
    /**
     * Clean up when this marker is no longer needed.
     */
    Marker.prototype.dispose = function () {
        this.setMap(null);
        _super.prototype.dispose.call(this);
    };
    return Marker;
}(Feature));
export default Marker;
export { _layersByMapUid };
//# sourceMappingURL=index.js.map